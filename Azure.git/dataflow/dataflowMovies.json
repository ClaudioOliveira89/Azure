{
	"name": "dataflowMovies",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DatasetDataflow",
						"type": "DatasetReference"
					},
					"name": "MoviesDL"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DatasetDataflow",
						"type": "DatasetReference"
					},
					"name": "MoviesTratados"
				}
			],
			"transformations": [
				{
					"name": "selectCorrigindoNome"
				},
				{
					"name": "Movies1950"
				},
				{
					"name": "PrimaryGeners"
				},
				{
					"name": "GenersRackRatting"
				},
				{
					"name": "AggregateRatings"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          {Rotton Tomato} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> MoviesDL",
				"MoviesDL select(mapColumn(",
				"          movie,",
				"          title,",
				"          genres,",
				"          year,",
				"          Rating,",
				"          {Rotten Tomato} = {Rotton Tomato}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCorrigindoNome",
				"selectCorrigindoNome filter(toInteger(year) > 1950) ~> Movies1950",
				"Movies1950 derive(PrimaryGeners = iif(locate('|', genres) > 1, left(genres, locate('|', genres) - 1), genres)\r",
				"\r",
				"\r",
				") ~> PrimaryGeners",
				"PrimaryGeners window(over(PrimaryGeners,",
				"          year),",
				"     asc({Rotten Tomato}, true),",
				"     RattingRank = rank()) ~> GenersRackRatting",
				"GenersRackRatting aggregate(groupBy(genres,",
				"          year),",
				"     AverageRatting = avg(toInteger({Rotten Tomato})),",
				"          HighstRated = first(title),",
				"          LowerRated = last(title),",
				"          Number0fMovies = count()) ~> AggregateRatings",
				"AggregateRatings sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          {Rotton Tomato} as string",
				"     ),",
				"     partitionFileNames:['MoviesdadosTratados.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> MoviesTratados"
			]
		}
	}
}